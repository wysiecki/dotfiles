==============================================================================
Author:  Martin von Wysiecki <wysiecki@gmail.com>
==============================================================================
Tricks - Yii2

INSTALLATION OF advanced template:
composer global require "fxp/composer-asset-plugin:~1.1.1"
composer create-project --prefer-dist yiisoft/yii2-app-advanced yii-application

php ./init
./yii migrate

STANDARD VALUES

//whole logged user
$user = \Yii::$app->user->identity;

//id of logged user
$userId = \Yii::$app->user->identity->id


REQUESTS:
$request = \Yii::$app->request;
$name = $request->post('name');
$get = $request->get();

Grid
        'enableSorting' => false

-- edit action column
    'class' => 'yii\grid\ActionColumn',
    'template'=>'{view} {update} {delete}',
    'urlCreator' => function($action, $model, $key, $index) {

-- add custom dropdown {active non active}
    add field to rules() in query model in section 'safe'
        ex.  [['active', ...], 'safe'],
    add andFilterWhere
        ex. ->andFilterWhere(['like', 'active', $this->active])
    'filter'=>array('1'=>'Active','0'=>'Not Active'),
    add custom format
        ex. 'format' => 'state',

-- add custom sorting for custom fileds, add in query model, method search()
        before $query->load();
        $dataProvider->sort->attributes['companyId'] = [
            'asc' => ['company_name' => SORT_ASC],
            'desc' => ['company_name' => SORT_DESC],
        ];
-- add custom related text field
        in query model:
            add filed name [public $testName]
            add to rules safe [['testanme'],'safe']
            add search method:
                $query->joinWith(['relTable'])
                $query->andFilterWhere('like', 'table.filed', $this->testName)
            in gridView attribute 'testName'

-- gen translation files
./yii message/extract @common/config/i18n.php

GRID STYLE
    [
        'attribute' => 'id',
        'headerOptions' => ['style' => 'width:40px'],
        'format' => 'raw',
    ],


HTML Dropdown
use yii\helpers\ArrayHelper;
<?= Html::dropDownList('framework_id', null, ArrayHelper::map(Framework::find()->all(), 'id', 'name'),[
    'onchange'=>'',
    'prompt'=>'-Choose a Category-',
    'class'=>'yourclass',
    ]) ?>

HTML hidden input
echo Html::hiddenInput('name', $value);
DB
    $db = \Yii::$app->getDb();
    $db->pdo->setAttribute(\PDO::MYSQL_ATTR_USE_BUFFERED_QUERY,true);
    $cmd = $db->createCommand('
        SET FOREIGN_KEY_CHECKS=0;
        TRUNCATE TABLE door;
        SET FOREIGN_KEY_CHECKS=1;
    ');
    $cmd->execute();
JSON
SELECT id, data2->'$.dupa' browser FROM qms_files WHERE data2->>'$.dupa' > 0

$data = Members::find()
        ->select(['concat(first_name,last_name) as value', 'first_name as  label','id as id'])
                ->asArray()
                        ->all();

CUSTOM FIELDS TO MODELS

    public $country_id;
    public function rules() {
        return ArrayHelper::merge( [ [['country_id'], 'integer']], parent::rules() );
    }

OR LIKE Search
    $query->andFilterWhere([
        'or',
        ['like', 'profiles.first_name', $this->userFullName],
        ['like', 'profiles.last_name', $this->userFullName],
    ]);

JOIN, SORT over two realated tables

    $query->joinWith(['reviewJournal','reviewJournal.country']);
    $dataProvider->sort->attributes['country_id'] = [
        'asc' => ['country.name' => SORT_ASC],
        'desc' => ['country.name' => SORT_DESC],
    ];

DEFAULT SORT ORDER
    $dataProvider = new ActiveDataProvider([
        'query' => $query,
        'sort'=> ['defaultOrder' => ['company_name'=>SORT_ASC]]
    ]);

$dataProvider->pagination=false;
$dataProvider->sort->defaultOrder = ['created_at' => SORT_DESC];


ARRAY DATAPROVIDER

use yii\data\ArrayDataProvider;
    $dataProvider = new ArrayDataProvider([
        'allModels' => $data,
        'sort' => [
            'attributes' => ['company', 'month', 'year'],
        ],
        'pagination' => [
            'pageSize' => 10,
        ],
    ]);

Relations and other stuff:
http://www.yiiframework.com/doc-2.0/guide-db-active-record.html#joining-with-relations


    DEBUG
        $model->validate();
        var_dump($model->getErrors());
         \Kint::dump($data);

    TIMESTAMP
        use yii\behaviors\TimestampBehavior;
        use yii\db\Expression;
        $db = new Expression('NOW()');

    SAVE ARRAY TO DB
        $model->attributes = $values;
        $model->save();

PARAMS
    Yii::$app->params['range-step-uwert']

PJAX
    [http://blog.neattutorials.com/yii2-pjax-tutorial/]
    $.pjax.reload('#jebudup', {url: '/test/dupa', type: "POST", data: {dupsko: 'moje'}});

FORM
<?= Html::textInput('allSearch', ''); ?>
echo Html::textInput('allSearch',null,['id'=>'docSearch']);

FORMAT FIELDS:
    'created:dateTime',

    echo Yii::$app->formatter->asDate('now', 'yyyy-MM-dd');

DROPDOWN (concate date)

    <?= $form->field($model, 'department_id')->widget(\kartik\widgets\Select2::classname(), [
        'data' => \yii\helpers\ArrayHelper::map(\common\models\Department::find()->orderBy('id')->all(), 'id', 'concate'),
        'options' => ['placeholder' => Yii::t('app', 'Choose Department')],
        'pluginOptions' => [
            'allowClear' => true
        ],
    ]); ?>
    Model:
    public function getConcate(){
        return $this->company->name.' - '.$this->name;
    }
    ENUM
            <?php echo $form->field($translateModel, 'language')->dropDownList(
                        common\models\FrameworkTranslations::optslanguage()
            ); ?>

DATE_RANGE_FILTER
    cols:
            [
                'attribute' => 'created',
                'format'=>'date',
                'filterType'=> \kartik\grid\GridView::FILTER_DATE_RANGE,
                'filterWidgetOptions' => [
                    'presetDropdown' => true,
                    'pluginOptions' => [
                        'format' => 'YYYY-MM-DD',
                        'locale' => [
                            'format' => 'DD-MM-YYYY',
                        ],
                        'opens'=>'left',

                    ] ,
                    'pluginEvents' => [
                        "apply.daterangepicker" => "function() { apply_filter('date')  }",
                    ]
                ],
            ]
    model search:
            if(isset($this->created) && $this->created!=''){
                $date_explode = explode(" - ", $this->created);
                $date1 = trim($date_explode[0]);
                $date2= trim($date_explode[1]);
                // echo'<br><br><br><br><br><br><br><br><br><br><br><br><br>';
                // var_dump($this->created);
                // var_dump($date1);
                // var_dump($date2);
                $a = new \DateTime($date1);
                $b = new \DateTime($date2);
                // echo $a->getTimestamp();
                $date1 = date( 'Y-m-d', $a->getTimestamp());
                $date2 = date( 'Y-m-d', $b->getTimestamp());
                $query->andFilterWhere(['between', 'created', $date1,$date2]);
            }


Masked input fields
http://demos.krajee.com/masked-input

RENDER FROM EVERYWHERE
return \Yii::$app->controller->renderPartial('@common/partial/_benefitContent'.$export['ver'],$export['data']);


DB
    NOT NULL ->andWhere(['not', ['City' => null]])

    Create migration
    ./yii migrate/create <name>

SUBQUERY

            $subQuery = UserToDepartment::getUsersForDepartment();
            $query->andFilterWhere(['not in', 'user.id', $subQuery]);

DEBUG
    \Kint::dump($data);

KARTIK
    DATECONTROL

    echo $form->field($model, 'contract_from')->widget(DatePicker::className(), [
        'options' => [
            'class' => 'form-control',
            'dateFormat' => 'php:d-m-Y',
            'saveFormat' => 'php:U'
        ],
    ]);

        $dateControlWidgetOpts = [
            'type' => DateControl::FORMAT_DATETIME,
            'saveFormat' => 'php:U',
            'displayFormat' => 'php:d-m-Y',
            'widgetOptions' => [
                'pluginOptions' => [
                    'minView' => 2,
                    'autoclose' => true,
                ]
            ]
        ];?>
        <?= $form->field($model, 'available_from')->widget(DateControl::className(), $dateControlWidgetOpts)->label('Available From*'); ?>


JAVASCRIPT in View

use yii\web\View;
$this->registerJs($js2, View::POS_HEAD); 

JS
        'onclick' => "$('.wrap').showLoading();",
        'onclick' => "$('.wrap').hideLoading();",


MODAL
close button
&nbsp;<span class="btn btn-default" data-dismiss="modal" aria-label="Close">Cancel</span>

Modal::begin([
    'headerOptions' => ['id' => 'modalHeader'],
    'id' => 'note-modal',
    'size' => 'modal-lg',
    'clientOptions' => [
        'backdrop' => 'static', // nie zamyka
        'keyboard' => FALSE,
    ]
]);

echo "<div id='modalContent'></div>";

yii\bootstrap\Modal::end();

AJAX

    $("#my_form").submit(function(e) {
        e.preventDefault(); // avoid to execute the actual submit of the form.
        var form = $(this);
        var url = form.attr('action');
        $.ajax({
               type: "POST",
               url: url,
               data: form.serialize(), // serializes the form's elements.
               success: function(data)
               {
                    var form_data = {cid : $cid, countryId : $countryId};
                    loadAjax('/simply-indexing/list', '#pjax-simply-content', form_data);
                    $('#simplyDocument').modal('hide');
                    $('.modal-backdrop').remove();
                    $('#modalContentSimply').html('');
               }
             });
        return false;
    });


FORM CHECK, save on changes


<?php
$js = <<<JS
var originalForm = '';
$(function(){
    originalForm = $($('#Journal')[0].elements).serialize();
});
$('#Journal').on('beforeValidate', function (e) {
    var newForm = $($('#Journal')[0].elements).serialize();
    if(originalForm != newForm) {
        var check = confirm('FORM CHANGES DETECTED. Ready to save?');
        if (check == true) {
            return true;
        } else {
            $('.wrap').hideLoading();
            return false;
        }
    } else {
        location.href = '/journal/index';
        return false;
    }
});
JS;

$this->registerJs($js);

BROWSER LOCAL STORAGE
    set
        window.localStorage.setItem('cuurl', hash);
    get
        var hash = window.localStorage.getItem('cuurl')


SORT ARRAY MULTI BY key name

array_multisort(array_column($array, 'name'), SORT_ASC, $array);
